<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于Hexo和GithubPage的个人博客搭建教程</title>
    <link href="/2024/02/17/blog-env-tutorial/"/>
    <url>/2024/02/17/blog-env-tutorial/</url>
    
    <content type="html"><![CDATA[<p>刚搭完，趁我还记得我今天做了啥赶紧写一下教程（</p><p>首先，什么是Hexo呢？文心一言如是说：</p><p>Hexo是<strong>一个基于Node.js的静态博客框架</strong>，具有快速、简洁且高效的特点。它拥有丰富的<strong>插件</strong>和主题，支持<strong>Markdown</strong>语法，使得编写博客文档变得方便快捷。Hexo使用<strong>Node.js</strong>进行开发，安装和部署过程简单，只需要<strong>几个npm命令</strong>即可完成。由于它是纯静态博客，不需要额外的数据库或PHP环境，<strong>仅仅需要一个Node.js环境</strong>即可运行。</p><p>这是Hexo的中文文档：<a href="https://hexo.io/zh-cn/docs/">文档 | Hexo</a>，包含了很详细的安装教程和介绍。</p><h2 id="Hexo环境配置"><a href="#Hexo环境配置" class="headerlink" title="Hexo环境配置"></a>Hexo环境配置</h2><p>正如文档中所说，配置Hexo环境首先要安装Node.js和git，此处不予赘述，详见Hexo文档。</p><p>Node.js官网：<a href="https://nodejs.org/en">Node.js (nodejs.org)</a>。注意安装Node.js的时候Add to path即可。</p><p>装好Node.js之后就可以愉快地输入一系列npm命令了：）</p><p>建议新建一个文件夹，然后进入安装Hexo（npm好像是允许局部装包的，就装在当前文件夹下）。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> myblog<br><span class="hljs-built_in">cd</span> myblog<br></code></pre></td></tr></table></figure><p>对于熟悉 npm 的进阶用户（显然不是我，我没试过），可以仅局部安装 <code>hexo</code> 包：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo<br></code></pre></td></tr></table></figure><p>对于新手如我，选择按照文档，一行代码装好Hexo：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h3 id="关于npm"><a href="#关于npm" class="headerlink" title="关于npm"></a>关于npm</h3><p>npm是Node.js的包管理器（Node Package Manager），用于管理Node.js应用程序的依赖项（包），类似于Python的pip。</p><p>可以用<code>npm list</code>查看当前项目目录下安装的依赖项。我最后一共装了这些：</p><p><img src="/2024/02/17/blog-env-tutorial/image-20240217224344696.png"></p><h3 id="关于Hexo-Theme"><a href="#关于Hexo-Theme" class="headerlink" title="关于Hexo Theme"></a>关于Hexo Theme</h3><p>Theme可以理解为博客模板，可以理解为，博客网站的UI形式框架已经被模板搭好了，这让博客搭建者可以只专注于博客内容的书写本身，而不是一头扎入前端三大件的海洋（笑）</p><p>我用的主题是<strong>Fluid</strong>。</p><p>它的文档很完整，对新手很友好，并且可以根据文档，自己对网站的部分UI进行调整：<a href="https://hexo.fluid-dev.com/docs/start/">开始使用 | Hexo Fluid 用户手册 (fluid-dev.com)</a></p><h2 id="如何部署"><a href="#如何部署" class="headerlink" title="如何部署"></a>如何部署</h2><p>根据主题文档的说明和Hexo文档的说明修改配置文件config等，就能配置自己的博客啦。具体配置的过程详见<a href="https://hexo.io/zh-cn/docs/setup">建站 | Hexo</a>。</p><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo init &lt;folder&gt;<br>$ <span class="hljs-built_in">cd</span> &lt;folder&gt;<br>$ npm install<br></code></pre></td></tr></table></figure><h3 id="写blog"><a href="#写blog" class="headerlink" title="写blog"></a>写blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new [layout] &lt;title&gt;<br></code></pre></td></tr></table></figure><p><img src="/2024/02/17/blog-env-tutorial/image-20240217191647019.png"></p><p>新建的blog文件会出现在<code>source/_posts</code>文件夹下。每天都在感叹Markdown语法真是伟大的发明（笑）。</p><h3 id="Hexo-Server"><a href="#Hexo-Server" class="headerlink" title="Hexo Server"></a>Hexo Server</h3><p>Server可以建立一个本地服务器查看网页，以对博客网页进行本地调试。在博客目录下输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>这时候点击<code>http://localhost:4000/</code>可以在浏览器中查看网页。当然也可以参照Hexo文档中所提到的方法修改端口号。</p><p><img src="/2024/02/17/blog-env-tutorial/image-20240217230112238.png"></p><h3 id="部署到Github-Page"><a href="#部署到Github-Page" class="headerlink" title="部署到Github Page"></a>部署到Github Page</h3><p>首先要在Github新建一个空仓库，仓库的名称需要是：<code>username.github.io</code>，然后在仓库设置界面把pages打开。</p><p>Hexo的git一键部署还是很方便的。当然也可以参照Hexo文档进行其他的部署方式，也可以将你的github域名和自己的域名绑定，从而通过一个稳定的url访问blog。</p><h4 id="记得改URL"><a href="#记得改URL" class="headerlink" title="记得改URL"></a>记得改URL</h4><p>部署到github page的话，记得在config里改URL为噢！比如这样：</p><p><img src="/2024/02/17/blog-env-tutorial/image-20240217230817610.png"></p><blockquote><p>Set your site url here. For example, if you use GitHub Page, set url as <a href="https://username.github.io/project">https://username.github.io/project</a></p></blockquote><p>这个URL会成为网站的根目录，其他所有静态文件的url都是这个目录的子文件夹。</p><h4 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h4><p>我参考的是git一键部署，首先在博客所在文件夹安装 <a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>然后在config文件里添加deploy，如图：</p><p><img src="/2024/02/17/blog-env-tutorial/image-20240217231054160.png"></p><p>deploy的可选参数在文档中可以查到：</p><p><img src="/2024/02/17/blog-env-tutorial/image-20240217231536802.png"></p><p>最后，请在库设置（Repository Settings）中将默认分支（和github pages创建所依赖的分支）设置为<code>_config.yml</code>配置中的分支名称，比如图中是<code>gh-pages</code>。</p><h4 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h4><p>在参照文档<a href="https://hexo.io/zh-cn/docs/one-command-deployment">部署 | Hexo</a>的一键部署部分配置完之后，想把博客部署到github page，只需如下两步！</p><p>首先：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo clean<br></code></pre></td></tr></table></figure><p>然后：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>即可访问<a href="https://username.github.io查看你的博客啦!/">https://username.github.io查看你的博客啦！</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序：树洞的年轮</title>
    <link href="/2024/02/17/Hello-World-0/"/>
    <url>/2024/02/17/Hello-World-0/</url>
    
    <content type="html"><![CDATA[<p>Hello World！</p><p>你好！我是溟溯。溟溯的树洞感谢你的到来。</p><p>在信息爆炸的每一天里，孤零零的个人博客就像是汪洋中的孤岛。YOLO、VAE、Transformer、Diffusion，全新的深度网络、框架和应用层出不穷，ChatGPT、StableDiffusion和Sora似乎正在将未来推向狂飙的方向，而我的博客陷入沉寂，与世隔绝——在现实的忙碌中，溟溯的树洞年久失修。</p><p>这已然是溟溯的树洞的第三个版本：最早的树洞建立于2021年7月22日，后于2022年3月6日更换主题模板，并对网站与博客进行整理；在2024年2月17日，将博客框架从Jekyll更换到Hexo，将模板更换为如今的Fluid。在整个2023年，溟溯的树洞一言不发，没有收到来自溟溯的任何博文。</p><p>直到未来的轨道出现、匆忙的步履暂歇，我方有时间回望过去：在过去的一年里，在对未来的迷茫里，我兜兜转转，过往的记忆在逐渐变得不真切，而我试图在一切的流逝中抓住那些我曾“存在”的见证，却说不出个所以然。作为一位大四学生，我开始认真回忆我在计算机系的将近四年的日子。</p><p>或许我已走了很远，从连VSCode配个环境都吃力的编程小白到给自己搭博客网站的小白；打了（不知道学成了什么样的）数理基础，以及从零开始的C++生活，在机器学习的摸爬滚打中对着帮助文档写Python程序；写汇编代码、写过CPU、写过体系结构流水线、写过基于Yolo的流程图检测、配置过外挂文档的大语言模型、做过符号音乐序列的和弦生成；去见证过图形学、SDN的瑰丽，计算机安全和密码学的神奇，最后走上了数学和机器学习的道路。记忆的框架仍在，只是细节逐渐变得模糊，还有更多的细节已经模糊，甚至从未存在于记忆之中。它因久远失真而失去了“记录”的本能，我也可能在这样的旅途中忘记了曾经的酸甜苦辣，忘记了曾经的“感受”，忘记了来时的路。</p><p>正因如此，我需要属于我的“存在的见证”。于是，溟溯的树洞应运而生。它就像大语言模型的外挂知识库，我不必全部记得，但需要存在一种用于见证的索引。</p><p>我在日复一日的沉默中失语，表达便成为了一种亟待学习的能力。曾有人说，一首曲子只有在登台演奏后才能算是学会。与之类似，一位优秀的老师曾经向我们介绍过小黄鸭程序调试法：当你调不出bug，不妨试着对桌上的小黄鸭讲讲你这段代码背后的想法。认真而专注的讲述是如此迫在眉睫，树洞便由此出现。博客让我在叙述之时拥抱自己，首先它是写给自己的历史。它可能是我在完成项目中的点滴，可能是生活中的杂谈，可能是解题时的灵光一闪，可能是我对我的发现的概括与论证。它正见证我的足迹，唤醒我沉睡的声音，记录我曾“鲜活地存在过”，也让我在明亮的真实中走向未来。</p><p>这是溟溯的树洞，是属于“我”的历史与现在。</p><p>感谢你看到这里，也很高兴能与你同行！</p>]]></content>
    
    
    <categories>
      
      <category>漫谈</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
